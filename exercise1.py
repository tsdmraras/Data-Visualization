# -*- coding: utf-8 -*-
"""data_visualization_lab_colab.ipynb adlı not defterinin kopyası

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N0pxINIQ2bYU4SrFbCktpUMUnJ6IQrDL

## Data Visualization Laboratory Exercises
This Jupyter Notebook contains **15 exercises** on data visualization using Python libraries: **Matplotlib, Seaborn, and Plotly**.

Each exercise is designed to test your ability to create and interpret visualizations.
- Some exercises provide sample data but no code.
- Some exercises require you to figure out the correct visualization on your own.
- Some exercises only give partial instructions.

**Libraries Used:**
- `matplotlib`
- `seaborn`
- `plotly`
- `pandas`
- `numpy`

Make sure you have installed all required libraries before starting:

```python
!pip install matplotlib seaborn plotly pandas numpy
```

## 1. Line Chart
Plot a line chart showing the trend of monthly revenue for a business over a year.
"""

# Sample Data
import pandas as pd

months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
revenue = [12000, 15000, 18000, 17000, 19000, 22000, 25000, 24000, 23000, 26000, 27000, 30000]

df = pd.DataFrame({'Month': months, 'Revenue': revenue})
df.head()

# Now, create a line chart using Matplotlib.
import matplotlib.pyplot as plt

# Assuming your DataFrame is named 'df' with columns 'Month' and 'Revenue'

# Create the line chart
plt.plot(df['Month'], df['Revenue'])

# Add labels and title
plt.xlabel("Month")
plt.ylabel("Revenue")
plt.title("Monthly Revenue Trend")

# Show the plot
plt.show()

"""## 2. Bar Chart
Create a bar chart that compares the number of units sold for different product categories.
"""

import matplotlib.pyplot as plt
# Sample data for product categories and units sold
fruits = ['Apple', 'Banana', 'Orange', 'Grapes', 'Strawberry']
sales = [350, 400, 300, 250, 200]

# Create the bar chart
df = pd.DataFrame({'Fruit': fruits, 'Sales': sales})

# Add labels and title
plt.bar(df['Fruit'], df['Sales'])

plt.xlabel('Fruit')
plt.ylabel('Sales')
plt.title('Fruit Sales Comparison')


# Rotate x-axis labels for better readability (optional)
plt.xticks(rotation=45, ha='right')

# Show the plot
plt.show()

"""## 3. Histogram
Generate a histogram to visualize the distribution of customer ages in a store.
"""

# Sample Data
import numpy as np
import matplotlib.pyplot as plt

np.random.seed(42)
ages = np.random.randint(18, 65, 200)

# Use Matplotlib or Seaborn to create the histogram.
plt.hist(ages, bins=10, edgecolor='black')
plt.xlabel("Age")
plt.ylabel("Frequency")
plt.title("Distribution of Customer Ages")
plt.show()

"""## 4. Scatter Plot
Plot a scatter plot to analyze the correlation between marketing spend and sales revenue.
"""

# prompt: Plot a scatter plot to analyze the correlation between marketing spend and sales revenue.

import matplotlib.pyplot as plt
# Sample Data (replace with your actual data)
# Örnek veri
marketing_spend = [1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500]
sales_revenue = [5000, 6000, 7500, 8000, 9000, 9500, 10000, 10500, 11000, 12000]

# Create the scatter plot
plt.scatter(marketing_spend, sales_revenue)

# Add labels and title
plt.xlabel("Marketing Spend")
plt.ylabel("Sales Revenue")
plt.title("Correlation between Marketing Spend and Sales Revenue")

# Show the plot
plt.show()

"""## 5. Subplots
Create a figure with two subplots: (1) a line chart showing website visitors over months, and (2) a bar chart showing the number of purchases.
"""

# Sample Data
months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']
visitors = [5000, 7000, 8000, 7500, 8200, 9000]
purchases = [200, 300, 450, 400, 480, 550]

# Create subplots using Matplotlib.
fig, axs = plt.subplots(1, 2, figsize=(12, 5))

# Subplot 1: Line chart for website visitors
axs[0].plot(months, visitors, marker='o', linestyle='-', color='b')
axs[0].set_xlabel("Month")
axs[0].set_ylabel("Website Visitors")
axs[0].set_title("Website Visitors Over Months")

# Subplot 2: Bar chart for purchases
axs[1].bar(months, purchases, color='g')
axs[1].set_xlabel("Month")
axs[1].set_ylabel("Purchases")
axs[1].set_title("Number of Purchases")

# Adjust layout to prevent overlapping
plt.tight_layout()

# Show the plot
plt.show()

"""## 6. Heatmap
Create a heatmap using Seaborn to visualize correlations between different variables in a dataset.
"""

# Import necessary libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Sample data
data = {
    'Size (sqft)': [1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000],
    'Rooms': [2, 3, 3, 4, 4, 5, 5, 6],
    'Bathrooms': [1, 2, 2, 3, 3, 4, 4, 5],
    'Price (USD)': [200000, 300000, 350000, 400000, 450000, 500000, 550000, 600000]
}

# Convert data to DataFrame
df = pd.DataFrame(data)

# Calculate the correlation matrix
corr_matrix = df.corr()

# Create the heatmap
plt.figure(figsize=(8, 6))  # Set the size of the plot
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f')

# Add a title
plt.title('Correlation Heatmap for House Prices')

# Display the plot
plt.show()

"""## 7. Box Plot
Generate a box plot to compare the salary distributions of employees in different departments.
"""

# Sample Data
import pandas as pd

data = {'Department': ['HR', 'IT', 'Sales', 'Marketing', 'HR', 'IT', 'Sales', 'Marketing'],
        'Salary': [50000, 70000, 45000, 60000, 52000, 71000, 47000, 62000]}
df = pd.DataFrame(data)

# Use Seaborn to create the box plot.
import seaborn as sns
import matplotlib.pyplot as plt

# Assuming 'df' is the DataFrame from the previous code

# Create the box plot
sns.boxplot(x='Department', y='Salary', data=df)

# Add labels and title
plt.xlabel("Department")
plt.ylabel("Salary")
plt.title("Salary Distribution by Department")

# Show the plot
plt.show()

"""## 8. Pie Chart
Create a pie chart to show the proportion of different customer types in a business.
"""

# Import necessary libraries
import matplotlib.pyplot as plt

# Sample data
product_categories = ['Electronics', 'Clothing', 'Home & Kitchen', 'Books', 'Sports & Outdoors']
sales_percentages = [30, 25, 20, 15, 10]  # Percentages (%)

# Create the pie chart
plt.pie(sales_percentages, labels=product_categories, autopct='%1.1f%%', startangle=90)

# Add a title
plt.title('Sales Distribution by Product Category')

# Display the plot
plt.show()

"""## 9. Interactive Bar Chart (Plotly)
Use Plotly to create an interactive bar chart for the number of sales per region.
"""

# Sample Data
import pandas as pd
import plotly.express as px

regions = ['North', 'South', 'East', 'West']
sales = [150, 200, 180, 220]

df = pd.DataFrame({'Region': regions, 'Sales': sales})

# Use Plotly to create an interactive bar chart.
fig = px.bar(df, x='Region', y='Sales', title='Sales per Region', labels={'Sales': 'Number of Sales', 'Region': 'Region'})

# Show the plot
fig.show()

"""## 10. Time-Series Data
Generate a time-series line plot showing daily temperature changes over a month.
"""

# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt

# Sample data
dates = pd.date_range(start='2023-10-01', end='2023-10-31', freq='D')  # 1 Oct - 31 Oct
temperatures = [20, 21, 22, 19, 18, 20, 22, 23, 24, 25, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]

# Convert data to DataFrame
df = pd.DataFrame({'Date': dates, 'Temperature': temperatures})

# Create the time-series line plot (enhanced)
plt.figure(figsize=(10, 6))
plt.plot(df['Date'], df['Temperature'], marker='o', color='red', linestyle='-', linewidth=2, markersize=8)

# Add axis labels and title
plt.xlabel('Date')
plt.ylabel('Temperature (°C)')
plt.title('Daily Temperature Changes Over a Month')

# Add grid lines
plt.grid(True, linestyle='--', alpha=0.7)

# Format the date axis
plt.xticks(rotation=45)  # Rotate date labels by 45 degrees

# Display the plot
plt.tight_layout()  # Prevent label cutoff
plt.show()

"""## 11. Choropleth Map (Geographical Visualization)
Create a choropleth map showing average income levels per country.
"""

# Sample Data
import pandas as pd

data = {'Country': ['USA', 'Canada', 'Germany', 'France', 'India'],
        'Income': [55000, 48000, 50000, 47000, 15000]}
df = pd.DataFrame(data)

# Use Plotly to create a choropleth map.

import plotly.express as px

fig = px.choropleth(
    df,
    locations='Country',
    locationmode='country names',
    color='Income',
    title='Average Income Levels per Country',
    color_continuous_scale='Viridis'  # You can choose other color scales
)

fig.show()

"""## 12. Violin Plot
Plot a violin plot to analyze the distribution of student test scores across different schools.
"""

# prompt: Plot a violin plot to analyze the distribution of student test scores across different schools.

import pandas as pd
import matplotlib.pyplot as plt
# Sample data (replace with your actual data)
data = {'School': ['School A', 'School A', 'School B', 'School B', 'School C', 'School C', 'School A', 'School B', 'School C'],
        'Test Score': [75, 80, 85, 90, 70, 78, 82, 88, 72]}
df = pd.DataFrame(data)

# Create the violin plot
sns.violinplot(x='School', y='Test Score', data=df)

# Add labels and title
plt.xlabel("School")
plt.ylabel("Test Score")
plt.title("Distribution of Student Test Scores Across Different Schools")

# Show the plot
plt.show()

"""## 13. Create a bar chart using Matplotlib to show total sales for different product categories."""

import pandas as pd
import matplotlib.pyplot as plt

# Sample Data
data = {
    'Category': ['Electronics', 'Clothing', 'Home & Kitchen', 'Beauty', 'Sports'],
    'Sales': [50000, 35000, 42000, 28000, 32000]
}

# Create DataFrame
df = pd.DataFrame(data)

# Bar Chart: Total Sales by Category
plt.figure(figsize=(8, 5))
plt.bar(df['Category'], df['Sales'], color='skyblue')

# Add labels and title (Complete this part)
plt.xlabel("Product Category")
plt.ylabel("Total Sales")
plt.title("Total Sales by Product Category")

# Show plot
plt.show()

"""## 14. Dashboard-like Figure
Combine multiple visualizations (bar chart, scatter plot, pie chart) into a single figure using subplots.
"""

# Sample Data
import pandas as pd

data = {'Category': ['A', 'B', 'C', 'D'], 'Values': [10, 20, 30, 40]}
df = pd.DataFrame(data)

# Use Matplotlib to create multiple subplots in a dashboard-like figure.
fig, axs = plt.subplots(2, 2, figsize=(10, 8))  # 2 rows, 2 columns

# Subplot 1: Bar chart
axs[0, 0].bar(df['Category'], df['Values'], color='skyblue')
axs[0, 0].set_title('Bar Chart')
axs[0, 0].set_xlabel('Category')
axs[0, 0].set_ylabel('Values')

# Subplot 2: Scatter plot (using the same data for demonstration)
axs[0, 1].scatter(df['Category'], df['Values'], color='orange')
axs[0, 1].set_title('Scatter Plot')
axs[0, 1].set_xlabel('Category')
axs[0, 1].set_ylabel('Values')

# Subplot 3: Pie chart
axs[1, 0].pie(df['Values'], labels=df['Category'], autopct='%1.1f%%', startangle=90)
axs[1, 0].set_title('Pie Chart')

# Subplot 4: You can add another plot here (e.g., line chart, etc.)
# ...

# Adjust layout to prevent overlapping
plt.tight_layout()

# Show the plot
plt.show()

"""## 15. Pandas DataFrame Exercise
Example: Create a DataFrame using the zip() function.
"""

import pandas as pd

# List1: Names of students
Students = ['Alice', 'Bob', 'Charlie', 'David']

# List2: Corresponding ages
Ages = [21, 23, 22, 20]

# Use zip() to combine the two lists into a list of tuples
student_data = list(zip(Students, Ages))  # Combine lists using zip()

# Convert the list of tuples into a Pandas DataFrame
df = pd.DataFrame(student_data, columns=['Student', 'Age'])

# Print the DataFrame
print(df)  # Print the DataFrame

"""## 16. Access and Filter Data from a DataFrame
You have been given a dataset containing information about employees, including their Name, Age, Gender, and Salary. Using Pandas, perform the following tasks:

1. Create a DataFrame using the provided dictionary structure.
2. Display the entire DataFrame.
3. Access the "Salary" column and print it.
4. Select the third row (index 2) and print it.
5. Retrieve only the "Name" and "Salary" columns for the first three rows.
6. Filter and print employees who earn more than $50,000.
"""

import pandas as pd

# Provided Data
data = {
    'Name': ['John', 'Alice', 'Bob', 'Eve', 'Charlie'],
    'Age': [25, 30, 22, 35, 28],
    'Gender': ['Male', 'Female', 'Male', 'Female', 'Male'],
    'Salary': [50000, 55000, 40000, 70000, 48000]
}

# 1. Create a DataFrame from the dictionary
df = pd.DataFrame(data)

# 2. Display the entire DataFrame
print(df)

# 3. Access and print the "Salary" column
salary_column = df['Salary']
print(salary_column)

# 4. Select and print the third row (index 2)
third_row = df.iloc[2]
print(third_row)

# 5. Retrieve and print only the "Name" and "Salary" columns for the first three rows
subset = df.loc[:2, ['Name', 'Salary']]
print(subset)

# 6. Filter and print employees who earn more than $50,000
filtered_data = df[df['Salary'] > 50000]
print(filtered_data)