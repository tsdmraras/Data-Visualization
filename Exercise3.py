# -*- coding: utf-8 -*-
"""data_visualization_exercise_2.ipynb adlı not defterinin kopyası

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZrMJ1HzKSSsYf1uN9Jg4-0afGIL_GIE0

# **Exercise: Data Visualization using Plotnine, Plotly, and Bokeh**

## **Instructions:**
Write Python code to answer each question using the appropriate visualization library (`plotnine`, `plotly`, or `bokeh`).
NB: Iris dataset is found on teams- under files and the other dataset as given instruction on the questions find on your own online.
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from plotnine import ggplot, aes, geom_histogram, labs, geom_point, geom_line, geom_boxplot, geom_bar

df=pd.read_csv('iris(in).csv')
df.head()

"""### **Questions**

**1. (Plotnine - Scatter Plot)**
Write a Python script using `plotnine` to create a **scatter plot** that visualizes the relationship between 'sepal_length' and 'sepal_width' from the `iris` dataset. Make sure to add a title and axis labels.
"""

(ggplot(df, aes(x='sepal_length', y='sepal_width'))
 + geom_point()
 + labs(title='Relationship between Sepal Length and Sepal Width',
        x='Sepal Length (cm)',
        y='Sepal Width (cm)')
)

"""**2. (Plotnine - Histogram)**
Use `plotnine` to create a **histogram** that visualizes the distribution of 'petal_length' from the `iris` dataset. Customize the bin width and color.
"""

(ggplot(df, aes(x='petal_length'))
 + geom_histogram(binwidth=0.5, fill='skyblue', color='black')
 + labs(title='Distribution of Petal Length', x='Petal Length (cm)', y='Frequency'))

"""**3. (Plotnine - Box Plot)**
Generate a **box plot** using `plotnine` to compare the distribution of 'sepal_length' across different species in the `iris` dataset.
"""

(ggplot(df, aes(x='species', y='sepal_length'))
 + geom_boxplot()
 + labs(title='Distribution of Sepal Length Across Species',
        x='Species',
        y='Sepal Length (cm)')
)

"""**4. (Plotly - Line Chart)**
Use `plotly.express` to create a **line chart** showing the sales trend over five years. The dataset should contain 'Year' and 'Sales' columns.

NB: Find the dataset online
"""

data = {'Year': [2018, 2019, 2020, 2021, 2022],
        'Sales': [100, 150, 120, 200, 250]}
df_sales = pd.DataFrame(data)

fig = px.line(df_sales, x='Year', y='Sales', title='Sales Trend Over Five Years')
fig.show()

"""**5. (Plotly - Scatter Plot)**
Write a script to create an **interactive scatter plot** using `plotly.express`, where 'sepal_width' is on the x-axis and 'sepal_length' is on the y-axis from the `iris` dataset. Color the points by species.
"""

fig = px.scatter(df,
                 x='sepal_width',
                 y='sepal_length',
                 color='species',
                 title='Interactive Scatter Plot of Sepal Width vs. Sepal Length',
                 labels={'sepal_width': 'Sepal Width (cm)', 'sepal_length': 'Sepal Length (cm)'}
                )
fig.show()

"""**6. (Plotly - Bar Chart)**
Using `plotly.express`, create a **bar chart** showing the average 'petal_width' for each species in the `iris` dataset.
"""

df_avg_petal_width = df.groupby('species')['petal_width'].mean().reset_index()

fig = px.bar(df_avg_petal_width,
             x='species',
             y='petal_width',
             title='Average Petal Width by Species',
             labels={'species': 'Species', 'petal_width': 'Average Petal Width (cm)'}
            )
fig.show()

"""**7. (Plotly - Time Series with Range Slider)**
Use `plotly.express` to create a **time series plot** of stock prices over time, with a **range slider** to zoom in on different time periods. Use `px.data.stocks()` as the dataset.
"""

df = px.data.stocks()

df = df.melt(id_vars=['date'], var_name='company', value_name='price')

fig = px.line(df,
              x='date',
              y='price',
              color='company',
              title='Stock Prices Over Time with Range Slider')

fig.update_xaxes(
    rangeslider_visible=True,
    rangeselector=dict(
        buttons=list([
            dict(count=1, label="1m", step="month", stepmode="backward"),
            dict(count=6, label="6m", step="month", stepmode="backward"),
            dict(count=1, label="YTD", step="year", stepmode="todate"),
            dict(count=1, label="1y", step="year", stepmode="backward"),
            dict(step="all")
        ])
    )
)

fig.show()

"""**8. (Plotl - Display Any Image Using Plotly in Python **
Write a Python script using plotly.express to display any image of your choice.

* You can use your own image file (e.g., .jpg or .png).
* Use skimage.io.imread() or PIL to read the image.
Display it using plotly.express.imshow().
Ensure the image is properly rendered with no compression.
"""

from PIL import Image
import requests
from io import BytesIO

image_url = "https://fotolifeakademi.com/uploads/2020/04/manzara-fotografi-cekmek-724x394.webp"


response = requests.get(image_url)
response.raise_for_status()
img = Image.open(BytesIO(response.content))
fig = px.imshow(img)
fig.update_layout(title="Landscape Photograph")
fig.show()

"""[link text](https://)**9. (Bokeh - Line Plot)**
Using `bokeh.plotting`, create a **simple line plot** where x values are `[1, 2, 3, 4, 5]` and y values are `[5, 3, 6, 2, 8]`. Add a title and axis labels.
"""

from bokeh.plotting import figure, show, output_notebook
output_notebook()

x = [1, 2, 3, 4, 5]
y = [5, 3, 6, 2, 8]

p = figure(title="Simple Line Plot", x_axis_label="X-Axis", y_axis_label="Y-Axis")

p.line(x, y, legend_label="Line", line_width=2)

show(p)

"""
**10. (Bokeh - Multi-Line Plot)**
Modify the following Bokeh script to plot **two separate lines** with different colors.

```Customize it by adding different **colors** for each line and increasing the line width."""

from bokeh.plotting import figure, show

p = figure(title='Multi-Line Graph')

x = [1, 2, 3, 4, 5]
y1 = [10, 20, 30, 40, 50]
y2 = [5, 15, 25, 35, 45]

p.line(x, y1, legend_label='Line A', line_color='blue', line_width=3)
p.line(x, y2, legend_label='Line B', line_color='red', line_width=3)

show(p)

"""**11. (Bokeh - Bar Chart)**
Create a **vertical bar chart** using Bokeh, where x values are `['A', 'B', 'C', 'D']` and y values are `[3, 7, 5, 2]`. Choose different colors for each bar.
"""

from bokeh.plotting import figure, show, output_notebook
from bokeh.models import ColumnDataSource
from bokeh.palettes import Spectral4

output_notebook()

x = ['A', 'B', 'C', 'D']
y = [3, 7, 5, 2]

source = ColumnDataSource(data=dict(x=x, y=y, color=Spectral4))

p = figure(x_range=x, title="Vertical Bar Chart",
           x_axis_label="Categories", y_axis_label="Values")

p.vbar(x='x', top='y', width=0.7, color='color', source=source)

show(p)

"""**12. (Bokeh - Interactive Legends)**
Modify a **Bokeh line plot** so that clicking on the legend hides the corresponding line.
"""

from bokeh.plotting import figure, show, output_notebook
from bokeh.models import ColumnDataSource, Legend, LegendItem
output_notebook()

x = [1, 2, 3, 4, 5]
y1 = [2, 4, 6, 8, 10]
y2 = [1, 3, 5, 7, 9]

source = ColumnDataSource(data=dict(x=x, y1=y1, y2=y2))

p = figure(title="Interactive Legend Example", x_axis_label="X-Axis", y_axis_label="Y-Axis")

line1 = p.line(x='x', y='y1', source=source, color="blue", legend_label="Line 1", line_width=2)
line2 = p.line(x='x', y='y2', source=source, color="red", legend_label="Line 2", line_width=2)

legend = Legend(items=[
    LegendItem(label="Line 1", renderers=[line1]),
    LegendItem(label="Line 2", renderers=[line2])
])
p.add_layout(legend)

legend.click_policy = "hide"

show(p)

"""**13. (Bokeh - Area Chart)**
Using `bokeh.plotting`, create an **area plot** using `p.varea()` with x values `[1, 2, 3, 4, 5]`, `y1` values `[2, 4, 6, 8, 10]`, and `y2` values `[1, 3, 5, 7, 9]`. Choose a fill color.
"""

from bokeh.plotting import figure, show, output_notebook

output_notebook()

x = [1, 2, 3, 4, 5]
y1 = [2, 4, 6, 8, 10]
y2 = [1, 3, 5, 7, 9]

p = figure(title="Bokeh Area Chart", x_axis_label="X-Axis", y_axis_label="Y-Axis")

p.varea(x=x, y1=y1, y2=y2, fill_color="lightblue")

show(p)

"""**14. (Bokeh - Scatter Plot)**
Write a Python script using `bokeh.plotting` to create a **scatter plot** with random data points, setting colors randomly using `bokeh.palettes`. Use at least 100 points.
"""

import numpy as np
from bokeh.plotting import figure, show, output_notebook
from bokeh.palettes import Category20

output_notebook()

num_points = 150
x = np.random.rand(num_points) * 10
y = np.random.rand(num_points) * 10

colors = [Category20[20][i % 20] for i in range(num_points)]

p = figure(title="Random Scatter Plot with Bokeh",
           x_axis_label="X-Axis",
           y_axis_label="Y-Axis")

p.circle(x, y, size=10, color=colors, alpha=0.8)

show(p)

"""**15. (Custom Visualization)**
Using **any** of the three libraries (`plotnine`, `plotly`, or `bokeh`), create a **custom visualization** of your choice with at least **two features** (e.g., different colors, interactive elements, multiple plots).
"""

import plotly.graph_objects as go
import random

x = list(range(1, 11))
y1 = [random.randint(1, 10) for _ in x]
y2 = [random.randint(1, 10) for _ in x]

fig = go.Figure()

fig.add_trace(go.Scatter(x=x, y=y1, mode='lines+markers', name='Dataset 1',
                         line=dict(color='blue'),
                         marker=dict(symbol='circle', size=10)))

fig.add_trace(go.Scatter(x=x, y=y2, mode='lines+markers', name='Dataset 2',
                         line=dict(color='green'),
                         marker=dict(symbol='square', size=10)))

fig.update_layout(
    title="Interactive Comparison Chart with Plotly",
    xaxis_title="X Axis",
    yaxis_title="Y Axis",
    legend_title="Datasets",
    template="plotly_white"
)

fig.show()